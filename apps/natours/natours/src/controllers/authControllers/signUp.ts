// import { WORKER_POOL_ENABLED } from '../../config';

import { CURRENT_API_VERSION } from '../../config';
import {
  AppError,
  autoEasyEncrypt,
  autoGeneratedRandomToken,
  // autoSignToken,
  catchAsync,
  // createSendToken,
  statusCodes,
} from '../../helpers';
import { bullmqQueue1 } from '../../messageBrokers';
import { User } from '../../models';
// import { poolProxy } from '../../workers';
// import { signToken } from './signToken';

// eslint-disable-next-line spellcheck/spell-checker
/**
 * @openapi
 * /users/signup:
 *  post:
 *   summary: sign up new user
 *
 *   consumes:
 *    - application/json
 *
 *   tags:
 *    - users
 *
 *   description: sign up new user
 *
 *   responses:
 *    200:
 *     description: OK
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/NewUserSchema'
 *
 *   requestBody:
 *    required: true
 *    content:
 *     application/json:
 *      schema:
 *       type: object
 *       properties:
 *        email:
 *         type: string
 *        password:
 *         type: string
 *        passwordConfirm:
 *         type: string
 *        name:
 *         type: string
 *        role:
 *         type: string
 *       required:
 *        - email
 *        - password
 *        - passwordConfirm
 *        - name
 *
 */
/**
 * ## signUp
 * @description signs up new user
 * takes in email, password, passwordConfirm, name, role
 * creates new user
 * sends email with token
 * sends response for success, to check email pointing to verifyEmail route
 */
export const signUp = catchAsync(
  async function signUpController(req, res, _next) {
    // console.log(req.body, 'req.body');

    // ! very bad security flaw, using direct raw input unfiltered
    // const newUser = await User.create(req.body);

    // ! prevent admin creation by only allowing some fields to be provided
    const { name, email, password, passwordConfirm, role = 'user' } = req.body;
    if (!['guide', 'lead-guide', 'user'].includes(role))
      return _next(
        new AppError('Invalid role: - guide | lead-guide | user - only', 400)
      );

    const randomToken = await autoGeneratedRandomToken();
    const encryptedToken = await autoEasyEncrypt(randomToken);

    const newUser = await User.create({
      name,
      email,
      password,
      passwordConfirm,
      role,
      verifyToken: encryptedToken,
    });

    /**
     * ## Moving to email verification
     */
    const verifyURL = `${req.protocol}://${req.get(
      'host'
    )}/api/${CURRENT_API_VERSION}/users/verify-email/${randomToken}`;

    await bullmqQueue1.add('emailConfirmation', {
      type: 'sendEmailConfirmation',
      data: {
        user: newUser,
        /**
         * ## TODO: we must provide a logged in URL to click on
         *
         * maybe nod needed if user logged in from same browser?
         */
        url: verifyURL,
      },
    });

    res.status(statusCodes.ok).json({
      status: 'success',
      message:
        'Please check your email inbox to verify your account within 10 minutes',
    });

    /**
     * ## OLD SIGNUP
     */

    // comment OLD
    // const tokenPayload = {
    //     // eslint-disable-next-line no-underscore-dangle
    //     id: newUser.id as string,
    // };

    // console.log(tokenPayload);

    // eslint-disable-next-line no-underscore-dangle
    // const token = await signToken(tokenPayload);
    // const token = await signToken({ id: newUser._id as string });

    // with worker pools
    // const token = await (WORKER_POOL_ENABLED === '1'
    //     ? poolProxy.signTokenWorker(JSON.stringify(tokenPayload))
    //     : signToken(tokenPayload));
    // const token = await (WORKER_POOL_ENABLED === '1'
    //     ? poolProxy.signTokenWorker(tokenPayload)
    //     : signToken(tokenPayload));

    // const token = await autoSignToken(tokenPayload);

    // console.log(token, 'token');
    // console.log(req.cookies, 'cookies');

    // comment OLD
    // ! prevent sending back the password
    // const hiddenSecretsUser = {
    //     name: newUser.name,
    //     email: newUser.email,
    //     // eslint-disable-next-line no-underscore-dangle
    //     // _id: newUser._id,
    // };

    // IMP: CSRF attacks vulnerability with cookies: need csrf token
    // alternatively send cookies ( set pre sending )
    // res.cookie('test-jwt', token, JWT_COOKIE_OPTIONS);

    // status 201 for created
    // res.status(201).json({
    //     status: 'success',
    //     // token,
    //     data: {
    //         user: hiddenSecretsUser,
    //         // user: newUser,
    //     },
    //     token,
    // });

    // TODO: does this complete before sending res?

    // new Email(newUser, req.originalUrl).sendWelcome();
    // console.log('post new email');
    // with bullmq
    // comment OLD
    // await bullmqQueue1.add('sendWelcomeEmail', {
    //     type: 'sendWelcome',
    //     data: {
    //         user: newUser,
    //         /**
    //          * ## TODO: we must provide a logged in URL to click on
    //          *
    //          * maybe nod needed if user logged in from same browser?
    //          */
    //         url: `${req.protocol}://${req.get('host')}/me`,
    //     },
    // });

    // comment OLD
    // eslint-disable-next-line no-void
    // void createSendToken({
    //     res,
    //     statusCode: statusCodes.created,
    //     dataToSend: { user: hiddenSecretsUser },
    //     payload: tokenPayload,
    //     req,
    // });

    // how to send and redirect?
    // res.status(201).write(
    //     JSON.stringify({
    //         status: 'success',
    //         token,
    //         data: {
    //             user: hiddenSecretsUser,
    //             // user: newUser,
    //         },
    //     })
    // );

    // res.redirect('/api/v1/users/login');
  }
);
